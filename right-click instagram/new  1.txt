if( x >= 1 && x < (width-1) && y >= 1 && y < height - 1)
	{
		float4 i00 = convert_float4(inputImage[c - 1 - width]);
		float4 i10 = convert_float4(inputImage[c - width]);
		float4 i20 = convert_float4(inputImage[c + 1 - width]);
		float4 i01 = convert_float4(inputImage[c - 1]);
		float4 i11 = convert_float4(inputImage[c]);
		float4 i21 = convert_float4(inputImage[c + 1]);
		float4 i02 = convert_float4(inputImage[c - 1 + width]);
		float4 i12 = convert_float4(inputImage[c + width]);
		float4 i22 = convert_float4(inputImage[c + 1 + width]);

		Gx =   i00 + (float4)(2) * i10 + i20 - i02  - (float4)(2) * i12 - i22;

		Gy =   i00 - i20  + (float4)(2)*i01 - (float4)(2)*i21 + i02  -  i22;

		/* taking root of sums of squares of Gx and Gy */
		outputImage[c] = convert_uchar4(hypot(Gx, Gy)/(float4)(2));
		
//^SOBEL EDGE

if( x >= 1 && x < (width-1) && y >= 1 && y < height - 1)
	{
		float4 i00 = convert_float4(inputImage[c - 1 - width]);
		float4 i10 = convert_float4(inputImage[c - width]);
		float4 i20 = convert_float4(inputImage[c + 1 - width]);
		float4 i01 = convert_float4(inputImage[c - 1]);
		float4 i11 = convert_float4(inputImage[c]);
		float4 i21 = convert_float4(inputImage[c + 1]);
		float4 i02 = convert_float4(inputImage[c - 1 + width]);
		float4 i12 = convert_float4(inputImage[c + width]);
		float4 i22 = convert_float4(inputImage[c + 1 + width]);

		Gx =   -i10 - i01 + (float4)(4)*i11  -i21 - i12;

		outputImage[c] = convert_uchar4(Gx);
		
//^LAPLACIAN OPERATOR(no diagonals)

if( x >= 1 && x < (width-1) && y >= 1 && y < height - 1)
	{
		float4 i00 = convert_float4(inputImage[c - 1 - width]);
		float4 i10 = convert_float4(inputImage[c - width]);
		float4 i20 = convert_float4(inputImage[c + 1 - width]);
		float4 i01 = convert_float4(inputImage[c - 1]);
		float4 i11 = convert_float4(inputImage[c]);
		float4 i21 = convert_float4(inputImage[c + 1]);
		float4 i02 = convert_float4(inputImage[c - 1 + width]);
		float4 i12 = convert_float4(inputImage[c + width]);
		float4 i22 = convert_float4(inputImage[c + 1 + width]);

		Gx =   -i00 + -i10 - i20 - i01  + (float4)(8) * i11 - i21 -i02 -i12 -i22;

		outputImage[c] = convert_uchar4(Gx);
//^LAPLACIAN OPERATOR (with diagonals)
if( x >= 3 && x < (width-1) && y >= 3 && y < height - 1)
	{
		float4 i00 = convert_float4(inputImage[c - 3 - 3*width ]);
		float4 i10 = convert_float4(inputImage[c - 2 - 3*width]);
		float4 i20 = convert_float4(inputImage[c - 1 - 3*width]);
		float4 i30 = convert_float4(inputImage[c - 3*width ]);
		float4 i40 = convert_float4(inputImage[c + 1 - 3*width]);
		float4 i50 = convert_float4(inputImage[c + 2 - 3*width ]);
		float4 i60 = convert_float4(inputImage[c + 3 - 3*width]);
		float4 i01 = convert_float4(inputImage[c - 3 - 2*width]);
		float4 i11 = convert_float4(inputImage[c - 2 - 2*width]);
		float4 i21 = convert_float4(inputImage[c - 1 - 2*width]);
		float4 i31 = convert_float4(inputImage[c - 2*width]);
		float4 i41 = convert_float4(inputImage[c + 1 - 2*width]);
		float4 i51 = convert_float4(inputImage[c + 2 - 2*width]);
		float4 i61 = convert_float4(inputImage[c + 3 - 2*width]);
		float4 i02 = convert_float4(inputImage[c - 3 - width]);
		float4 i12 = convert_float4(inputImage[c - 2 - width]);
		float4 i22 = convert_float4(inputImage[c - 1 - width]);
		float4 i32 = convert_float4(inputImage[c - width]);
		float4 i42 = convert_float4(inputImage[c + 1 - width]);
		float4 i52 = convert_float4(inputImage[c + 2 - width]);
		float4 i62 = convert_float4(inputImage[c + 3 - width]);
		float4 i03 = convert_float4(inputImage[c-3]);
		float4 i13 = convert_float4(inputImage[c-2]);
	    float4 i23 = convert_float4(inputImage[c-1]);
		float4 i33 = convert_float4(inputImage[c]);
		float4 i43 = convert_float4(inputImage[c+1]);
		float4 i53 = convert_float4(inputImage[c+2]);
		float4 i63 = convert_float4(inputImage[c+3]);
		float4 i04 = convert_float4(inputImage[c - 3 + width]);
		float4 i14 = convert_float4(inputImage[c - 2 + width]);
		float4 i24 = convert_float4(inputImage[c - 1 + width]);
		float4 i34 = convert_float4(inputImage[c + width]);
		float4 i44 = convert_float4(inputImage[c + 1 + width]);
		float4 i54 = convert_float4(inputImage[c + 2 + width]);
		float4 i64 = convert_float4(inputImage[c + 3 + width]);
		float4 i05 = convert_float4(inputImage[c - 3 + 2*width]);
		float4 i15 = convert_float4(inputImage[c - 2 + 2*width]);
		float4 i25 = convert_float4(inputImage[c - 1 + 2*width]);
		float4 i35 = convert_float4(inputImage[c + 2*width]);
		float4 i45 = convert_float4(inputImage[c + 1 + 2*width]);
		float4 i55 = convert_float4(inputImage[c + 2 + 2*width]);
		float4 i65 = convert_float4(inputImage[c + 3 + 2*width]);
		float4 i06 = convert_float4(inputImage[c - 3 + 3*width]);
		float4 i16 = convert_float4(inputImage[c - 2 + 3*width]);
		float4 i26 = convert_float4(inputImage[c - 1 + 3*width]);
		float4 i36 = convert_float4(inputImage[c + 3*width]);
		float4 i46 = convert_float4(inputImage[c + 1 + 3*width]);
		float4 i56 = convert_float4(inputImage[c + 2 + 3*width]);
		float4 i66 = convert_float4(inputImage[c + 3 + 3*width]);
		
		Gx =   (float4)(5)*i03  +(float4)(5)*i11 +(float4)(18)*i12 +(float4)(32)*i13 +(float4)(18)*i14 +(float4)(5)*i15 +(float4)(18)*i21 +(float4)(64)*i22 +(float4)(100)*i23 +(float4)(64)*i24 +(float4)(18)*i25 +(float4)(5)*i30 +(float4)(32)*i31 +(float4)(100)*i32 +(float4)(100)*i33 +(float4)(100)* i34 +(float4)(32)* i35 +(float4)(5)*i36 +(float4)(18)*i41 +(float4)(64)*i42 +(float4)(100)*i43 +(float4)(64)*i44 +(float4)(18)*i45 +(float4)(5)*i51 +(float4)(18)*i52 +(float4)(32)*i53 +(float4)(18)*i54 +(float4)(5)*i55 +(float4)(5)*i63;

		outputImage[c] = convert_uchar4((Gx)/(float4)(1048));
		
//^GAUSSIAN BLUR

if( x >= 2 && x < (width-2) && y >= 2 && y < height - 2)
	{
		float4 i00 = convert_float4(inputImage[c - 2 - 2*width ]);
		float4 i10 = convert_float4(inputImage[c - 1 - 2*width]);
		float4 i20 = convert_float4(inputImage[c - 2*width]);
		float4 i30 = convert_float4(inputImage[c + 1 - 2*width]);
		float4 i40 = convert_float4(inputImage[c + 2 - 2*width]);
		float4 i01 = convert_float4(inputImage[c - 2 - width]);
		float4 i11 = convert_float4(inputImage[c - 1 - width]);
		float4 i21 = convert_float4(inputImage[c - width]);
		float4 i31 = convert_float4(inputImage[c + 1 - width]);
		float4 i41 = convert_float4(inputImage[c + 2 - width]);
		float4 i02 = convert_float4(inputImage[c - 2]);
		float4 i12 = convert_float4(inputImage[c - 1]);
		float4 i22 = convert_float4(inputImage[c]);
		float4 i32 = convert_float4(inputImage[c + 1]);
		float4 i42 = convert_float4(inputImage[c + 2]);
		float4 i03 = convert_float4(inputImage[c - 2 + width]);
		float4 i13 = convert_float4(inputImage[c - 1 + width]);
	    float4 i23 = convert_float4(inputImage[c + width]);
		float4 i33 = convert_float4(inputImage[c + 1 + width]);
		float4 i43 = convert_float4(inputImage[c + 2 + width]);
		float4 i04 = convert_float4(inputImage[c - 2 + 2*width]);
		float4 i14 = convert_float4(inputImage[c - 1 + 2*width]);
		float4 i24 = convert_float4(inputImage[c + 2*width]);
		float4 i34 = convert_float4(inputImage[c + 1 + 2*width]);
		float4 i44 = convert_float4(inputImage[c + 2 + 2*width]);
		
		
		Gx =  -i02 -i11 -(float4)(2)*i12 -i13 -i20 -(float4)(2)*i21 +(float4)(16)*i22 - (float4)(2)*i23 -i24 -i31 -(float4)(2)*i32 -i33 -i42;

		outputImage[c] = convert_uchar4(Gx);
//^Laplacian of Gaussian